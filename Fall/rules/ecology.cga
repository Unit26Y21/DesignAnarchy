/**
 * File:    ecology.cga
 * Created: 27 Oct 2021 16:57:21 GMT
 * Author:  Nathan Laveu
 */

version "2021.1"

#Scenario 1:
#Since this is a value that changes depending on the scenario, it should be an attribute
#const RainfallIntensity = 0.025
#Rainfall Intensity to be 3 scenarios (0.025m,0.050m, 0.075m)

@Enum(0.025, 0.05, 0.07) 
#use enum to capture the three options
attr rainfallIntensity = 0.025

@Hidden
attr runoffSavings = 0

@Hidden 
attr roofArea = 0

#@StartRule you do not need this StartRule. THis is an attribute
#AssignSoilGrade
@Enum("GradeZero", "GradeOne", "GradeTwo", "GradeThree", "GradeFour") #considerusing integers instead of strings in the future.
attr soilGrade =
	50%: SoilGradeCoefficient("GradeOne")
	30%: SoilGradeCoefficient("GradeTwo")
	10%: SoilGradeCoefficient("GradeThree")
	10%: SoilGradeCoefficient("GradeFour")
	else: SoilGradeCoefficient("GradeZero")
	

@StartRule
Lot -->
	extrude(rand(10, 80))
	report("height", geometry.height())
	report("volume", geometry.volume)
	
	SelectVerticalSurfaces
	SelectTopSurfaces
	
@StartRule
SelectVerticalSurfaces -->
	comp(f){side: ReportVerticalSurfaces}

@StartRule
SelectTopSurfaces -->
	comp(f){top: ReportTopSurfaces}
	#this comp needs to go inside a rule
	#comp(f){top: ReportRunoffSavings} like here, 
	#but you do not need it since you are already selecting the top and using ReportTopSurfaces to get the ReportRunoss Saving

ReportVerticalSurfaces -->
		report("verticalArea", geometry.area)

ReportTopSurfaces -->
	set(roofArea, geometry.area()) #lets report the roof area here, in case you do some offsets, setbacks or other geomtric manipulations
	report("Roofarea", roofArea) #use the attribute instead of calculating on the fly so you reduce bug finding.
	report("Soil Grade", soilGrade)
	#report runoff saving will go here:
	set(runoffSavings, ReportRunoffSavings(rainfallIntensity, roofArea, soilGrade)) # you set the attribute to a new number using your function from below
	report("Runoff Savings", runoffSavings)
	

############## Functions
##############
# AssignSoilGradeCoefficient Function
SoilGradeCoefficient(gradeType) =
	case gradeType == "GradeOne": 0.1
	case gradeType == "GradeTwo":  0.2
	case gradeType == "GradeThree": 0.3
	case gradeType == "GradeFour": 0.4
	else: 0 #what happens with Grade zero?
	
	
#Savings should be a function not a rule
#careful where you put the parenthesis and the multiplications, you might get different results...
ReportRunoffSavings(rainfallIntensity, roofArea, soilGrade) = rainfallIntensity * roofArea - (soilGrade * rainfallIntensity * roofArea)
	


	
